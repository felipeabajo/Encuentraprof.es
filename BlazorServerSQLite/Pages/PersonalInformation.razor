@page "/personal-information"
@inject IJSRuntime JSRuntime
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize (Roles = "Teacher")]

<PageTitle>Personal information</PageTitle>
<Heading1 text="Personal information"></Heading1>
<TeacherNeverPublicAlert @ref="teacherNeverPublicAlert"></TeacherNeverPublicAlert>

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator/>
    <div class="form-row single-col">
        <div class="col form-group">
            <div class="control-section" id="profile-image-section">
                <input type="file" id="img-upload" style="display:none" accept="image/*" />
                <div class="e-profile e-img-editor-sample e-hide">
                    <div class="e-custom-wrapper">
                        <canvas class="my-2" id="img-canvas" style="max-width: 150px; max-height: 150px;"></canvas>
                        <img alt="img" id="custom-img" crossorigin="anonymous" @onload="OnLoad" style="display: none;"
                                src="@userImagePath" />
                        <span id="custom-edit" class="e-custom-edit e-btn e-primary" contenteditable="false" @onclick="EditUploadImage">
                            <SfIcon class="e-custom-icon e-image-editor-icons" contenteditable="false" IconCss="e-icons e-edit"></SfIcon>
                        </span>
                    </div>
                </div>
                <SfDialog Target="#profile-image-section" @bind-Visible="uploadImageVisibility"
                        ShowCloseIcon="true" Width="340px" Height="400px">
                    <DialogEvents Opened="UploadImageDialogOpened" Closed="UploadImageDialogClosed"></DialogEvents>
                    <DialogTemplates>
                        <Header>
                                Upload Profile Image
                        </Header>
                        <Content>
                            <div class="dialog-content">
                                @if (isOpened)
                                {
                                    <SfIcon Name="IconName.CircleInfo"></SfIcon>
                                    <br/>
                                    <small>
                                        Profile image is required for public profiles.<br /> Supported formats: .jpg. <br /> Maximum file size: 5MB. <br /> Recommended aspect ratio: 1:1.
                                    </small>
                                    <SfUploader ID="UploadFiles" AllowMultiple="false" AutoUpload="false"
                                            MinFileSize="1000" MaxFileSize="5000000" AllowedExtensions=".jpg">
                                        <UploaderAsyncSettings SaveUrl="ImagePersonalInfo/Save"></UploaderAsyncSettings>
                                        <UploaderEvents Success="@ImageUploaded" BeforeRemove="@BeforeRemove" 
                                            BeforeUpload="@BeforeUpload"></UploaderEvents> 
                                    </SfUploader>
                                }
                            </div>
                        </Content>
                    </DialogTemplates>
                </SfDialog>
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="col form-group">
            <label class="control-label">Firstname:</label>
@*             <AuthorizeView Roles="Teacher" Context="teacherContext">
 *@                <SfIcon class="info-icon" id="firstname-info-icon" Name="IconName.CircleInfo"></SfIcon>
@*             </AuthorizeView>
 *@            <SfTextBox Blur="FirstnameBlur" @bind-Value=@user.Firstname Placeholder="@firstnamePlaceholder"></SfTextBox> @* CssClass="@cssClassFirstname" *@
        </div>
        <div class="col form-group">
            <label class="control-label">Lastname:</label>
            <SfTextBox Blur="LastnameBlur" @bind-Value=@user.Lastname Placeholder="@lastnamePlaceholder"></SfTextBox> @* CssClass="@cssClassLastname" *@

      </div>
    </div>
@*     <AuthorizeView Roles="Teacher" Context="teacherContext">
 *@        <div class="form-row">
            <div class="col form-group">
                <label class="control-label">Speciality:</label>
                <SfIcon class="info-icon" id="speciality-info-icon" Name="IconName.CircleInfo"></SfIcon>
                <SfAutoComplete @ref="AutoCompleteObj1" TValue="string" TItem="Speciality" Placeholder="@specialityPlaceholder" @bind-Value="user.Speciality"
                        DataSource="@Speciality.Specialities" FilterType="Syncfusion.Blazor.DropDowns.FilterType.StartsWith">
                    <AutoCompleteFieldSettings Value="Name"></AutoCompleteFieldSettings>
                    <AutoCompleteEvents TItem="Speciality" TValue="string" ValueChange="@SpecialityChanged"></AutoCompleteEvents>
                </SfAutoComplete>
            </div>
            <div class="col form-group">
                <label class="control-label">Province:</label>
            <SfIcon class="info-icon" id="province-info-icon" Name="IconName.CircleInfo"></SfIcon>
            <SfAutoComplete @ref="AutoCompleteObj" TValue="string" TItem="Province" Placeholder="@provincePlaceholder" @bind-Value="user.Province"
                    DataSource="@Province.Provinces" FilterType="Syncfusion.Blazor.DropDowns.FilterType.StartsWith">
                <AutoCompleteFieldSettings Value="Name"></AutoCompleteFieldSettings>
                    <AutoCompleteEvents TItem="Province" TValue="string" ValueChange="@ProvinceChanged" 
                        ></AutoCompleteEvents>
            </SfAutoComplete>
            </div>
        </div>
        <div class="form-row">
            <div class="col form-group">
                <label class="control-label">Price per hour (€):</label>
                <SfIcon class="info-icon" id="price-info-icon" Name="IconName.CircleInfo"></SfIcon>
                <SfNumericTextBox TValue="int?" Placeholder="@pricePlaceholder" @bind-Value=@user.Price Min="1"> @* CssClass="@cssClassUsername" *@
                    <NumericTextBoxEvents TValue="int?" Blur="PriceBlur"></NumericTextBoxEvents>
                </SfNumericTextBox>
                <ValidationMessage For="@(() => user.Price)"></ValidationMessage>
            </div>
                <div class="col form-group">
                    <label class="control-label">Public profile:</label>
                    <SfSwitch CssClass="e-small" Disabled=@switchDisable
                              ValueChange="PublicProfileValueChangeHandler" TChecked="bool?" @bind-Checked="user.PublicProfile">
                    </SfSwitch>
                    <div class="@cssClassSwitchMessage">
                        <SfMessage Severity="MessageSeverity.Info">
                            Required fields must be filled for enabling public mode.
                        </SfMessage>
                    </div>
                </div>
            </div>
@*     </AuthorizeView>
 *@</EditForm>
<SfToast ID="do-toast" @ref="DoToastObj" CssClass="toast_template"
         Timeout="10000" ExtendedTimeout="5000">
    <ToastPosition X="Left" Y="Bottom"></ToastPosition>
    <ToastTemplates>
        <Template>
            <div id='template_toast'>
                <div class="horizontal-align">
                    <div class='toast-content'>
                        <div class='toast-message'>
                            Your profile is now private.
                        </div>
                    </div>
                </div>
            </div>
        </Template>
    </ToastTemplates>
</SfToast>

<SfToast ID="undo-toast" @ref="UndoToastObj" CssClass="toast_template"
         Timeout="10000" ExtendedTimeout="5000" >
    <ToastPosition X="Left" Y="Bottom"></ToastPosition>
    <ToastTemplates>
        <Template>
            <div id='template_toast'>
                <div class="horizontal-align">
                    <div class='toast-content'>
                        <div class='toast-message'>
                            Your profile is now public. 
                        </div>
                    </div>
                </div>
            </div>
        </Template>
    </ToastTemplates>
</SfToast>

@code {
    public ApplicationUser? user;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Inject]
    UserManager<ApplicationUser> userManager { get; set; }
    private EditContext editContext;
    public string userImagePath;
    TeacherNeverPublicAlert teacherNeverPublicAlert = new TeacherNeverPublicAlert();
    SfToast DoToastObj;
    SfToast UndoToastObj;
    private bool isDoToastShown { get; set; }
    private bool isUndoToastShown { get; set; }
    private bool? done = false;
    private bool changeInRequiredFields = false;
    private bool areRequiredFieldsFilled { get; set; }
    private bool uploadImageVisibility { get; set; } = false;
    private bool isOpened { get; set; }
    private DotNetObjectReference<PersonalInformation>? objRef;
    private string dataUrl;
    SfAutoComplete<string, Province> AutoCompleteObj = new SfAutoComplete<string, Province>();
    SfAutoComplete<string, Speciality> AutoCompleteObj1 = new SfAutoComplete<string, Speciality>();
    private EditableType EditableOn = EditableType.EditIconClick;
    private RenderMode Mode = RenderMode.Inline;
    private bool Disabled { get; set; } = false;
    private bool ShowButtons { get; set; } = true;
    private string firstnamePlaceholder { get; set; } = "Enter your firstname";
    private string lastnamePlaceholder { get; set; } = "Enter your lastname";
    private string specialityPlaceholder { get; set; } = "Enter your speciality";
    private string provincePlaceholder { get; set; } = "Enter your province";
    private string pricePlaceholder { get; set; } = "Enter the price of your services";
    private bool switchDisable {get; set;}
    string cssClassSwitchMessage = "hide-message";

    protected override async Task OnInitializedAsync()
    {
        var user2 = (await authenticationStateTask).User;
        if (user2.Identity.IsAuthenticated)
        {
            user = await userManager.GetUserAsync(user2);
            editContext = new EditContext(user);
            done = !user.PublicProfile;
            await GetUserImagePath();
            await AreRequiredFieldsFilled();
            if (areRequiredFieldsFilled)
            {
                switchDisable = false;
            }
            else
            {
                user.PublicProfile = false;
                await UpdateUserContext(user);
                switchDisable = true;
            }
            if (switchDisable)
            {
                cssClassSwitchMessage = "show-message";
            }
            else
            {
                cssClassSwitchMessage = "hide-message";
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<bool>("canvasInterop.onInitialized");
            StateHasChanged();
        }

    }

    public async void FirstnameBlur(FocusOutEventArgs args)
    {
            await UpdateUserContext(user);
            ChangeInRequiredFields();
            await AreRequiredFieldsFilled();
            if (changeInRequiredFields && areRequiredFieldsFilled)
            {
                switchDisable = false;
            }
            else
            {
                user.PublicProfile = false;
                await UpdateUserContext(user);
                switchDisable = true;
            }
            if (switchDisable)
            {
                cssClassSwitchMessage = "show-message";
            }
            else
            {
                cssClassSwitchMessage = "hide-message";
            }
            StateHasChanged();
    }

    public async void LastnameBlur(FocusOutEventArgs args)
    {
        if (user.Lastname != null && user.Lastname != String.Empty)
        {
            await UpdateUserContext(user);
        }
    }

    private async void ProvinceChanged(ChangeEventArgs<string, Province> args)
    {
        await UpdateUserContext(user);
        ChangeInRequiredFields();
        await AreRequiredFieldsFilled();
        if (changeInRequiredFields && areRequiredFieldsFilled)
        {
            switchDisable = false;
        }
        else
        {
            user.PublicProfile = false;
            await UpdateUserContext(user);
            switchDisable = true;
        }
        if (switchDisable)
        {
            cssClassSwitchMessage = "show-message";
        }
        else
        {
            cssClassSwitchMessage = "hide-message";
        }
        StateHasChanged();
    }

    private async void SpecialityChanged(ChangeEventArgs<string, Speciality> args)
    {
        await UpdateUserContext(user);
        ChangeInRequiredFields();
        await AreRequiredFieldsFilled();
        if (changeInRequiredFields && areRequiredFieldsFilled)
        {
            switchDisable = false;
        }
        else
        {
            user.PublicProfile = false;
            await UpdateUserContext(user);
            switchDisable = true;
        }
        if (switchDisable)
        {
            cssClassSwitchMessage = "show-message";
        }
        else
        {
            cssClassSwitchMessage = "hide-message";
        }
        StateHasChanged();
    }

    public async void PriceBlur(NumericBlurEventArgs<int?> args)
    {
        await UpdateUserContext(user);
        ChangeInRequiredFields();
        await AreRequiredFieldsFilled();
        if (changeInRequiredFields && areRequiredFieldsFilled)
        {
            switchDisable = false;
        }
        else
        {
            user.PublicProfile = false;
            await UpdateUserContext(user);
            switchDisable = true;
        }
        if (switchDisable)
        {
            cssClassSwitchMessage = "show-message";
        }
        else
        {
            cssClassSwitchMessage = "hide-message";
        }
        StateHasChanged();
    }

    public async void PublicProfileValueChangeHandler(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args)
    {
        if(user.PublicProfile == true)
        {
            user.EverPublicProfile = true;
        }
        await UpdateUserContext(user);
        teacherNeverPublicAlert.Refresh();
        await ToggleDo();
    }

    private async void ImageUploaded(Syncfusion.Blazor.Inputs.SuccessEventArgs args)
    {
        Timer timer = new Timer();
        timer.Interval = TimeSpan.FromSeconds(2).TotalMilliseconds;
        timer.Elapsed += OnTimedEvent;
        timer.Enabled = true;
        timer.AutoReset = false;
        await GetUserImagePath();
        ChangeInRequiredFields();
        await AreRequiredFieldsFilled();
        if (changeInRequiredFields && areRequiredFieldsFilled)
        {
            switchDisable = false;
        }
        if (switchDisable)
        {
            cssClassSwitchMessage = "show-message";
        }
        else
        {
            cssClassSwitchMessage = "hide-message";
        }
        StateHasChanged();
    }

    private void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        uploadImageVisibility = false;
        InvokeAsync(StateHasChanged);
    }

    private async Task BeforeUpload(BeforeUploadEventArgs args)
    {
        var path = Navigation.BaseUri + "ImagePersonalInfo/SetUserId";
        var response = await Http.PostAsJsonAsync<string>(path, user.Id);
        ChangeInRequiredFields();
    }

    private void BeforeRemove(BeforeRemoveEventArgs args)
    {
        args.PostRawFile = false;
    }
    async Task UpdateUserContext(ApplicationUser user)
    {
        var path = Navigation.BaseUri + "Users/UpdateUserContext";
        var response = await Http.PostAsJsonAsync<ApplicationUser>(path, user);
    }
    async Task UpdateUser(ApplicationUser user)
    {
        var path = Navigation.BaseUri + "Users/UpdateUser";
        var response = await Http.PostAsJsonAsync<ApplicationUser>(path, user);
    }

    private async Task GetUserImagePath()
    {
        var path = Navigation.BaseUri + $"ImagePersonalInfo/IsUserImagePathURLNull?Id={user.Id}";
        var result = await Http.GetFromJsonAsync<bool>(path);
        string userIconPath = Navigation.BaseUri + "img/userIcon.png";
        userImagePath = result ? userIconPath : Navigation.BaseUri + "img/users/" + user.Id + ".jpg";
    }

    async Task ToggleDo()
    {
        if (done == false)
        {
            if (isUndoToastShown)
            {
                await HideDoToast();
                await HideUndoToast();
            }
            await Do();
        }
        if (done == true)
        {
            if (isDoToastShown)
            {
                await HideDoToast();
            }
            await Undo();
        }
        done = !done;
    }

    public async Task Do()
    {
        if (!isDoToastShown)
        {
            await ShowDoToast();
        }
    }

    public async Task Undo()
    {
        if (!isUndoToastShown)
        {
            await ShowUndoToast();
        }
    }
    private async Task ShowDoToast()
    {
        await this.DoToastObj.ShowAsync();
        isDoToastShown = true;
    }
    private async Task HideDoToast()
    {
        await this.DoToastObj.HideAsync();
        isDoToastShown = false;
    }
    private async Task ShowUndoToast()
    {
        await this.UndoToastObj.ShowAsync();
        isUndoToastShown = true;
    }
    private async Task HideUndoToast()
    {
        await this.UndoToastObj.HideAsync();
        isUndoToastShown = false;
    }
    private void ChangeInRequiredFields()
    {
        changeInRequiredFields = true;
    }
    private async Task AreRequiredFieldsFilled()
    {
        if ((userImagePath == Navigation.BaseUri + "img/userIcon.png") ||
        (user.Price == null || user.Price == 0) ||
        (user.Speciality == null || user.Speciality == String.Empty) ||
        (user.Firstname == null || user.Firstname == String.Empty) ||
        (user.Province == null || user.Province == String.Empty))
        {
            areRequiredFieldsFilled = false;
        }
        else
        {
            areRequiredFieldsFilled = true;
        }
    }

    private async Task OnLoad()
    {
        await JSRuntime.InvokeAsync<bool>("canvasInterop.imageLoaded", objRef);
    }
    private async Task UploadImageDialogOpened(Syncfusion.Blazor.Popups.OpenEventArgs args)
    {
        if (!isOpened)
        {
            isOpened = true;
            StateHasChanged();
        }
    }
    private async Task UploadImageDialogClosed(Syncfusion.Blazor.Popups.CloseEventArgs args)
    {
        isOpened = false;
    }
    private async void EditUploadImage()
    {
        uploadImageVisibility = true;
        dataUrl = await JSRuntime.InvokeAsync<string>("canvasInterop.getImageSource");
    }
}

<style>
    #firstname-info-icon:hover:after
    {
        content: "Firstname is required for public profiles.";
    }
    #province-info-icon:hover::after{
        content: "Province is required for public profiles.";
    }
    #speciality-info-icon:hover::after{
        content: "Speciality is required for public profiles.";
    }
    #price-info-icon:hover::after{
        content: "Price per hour is required for public profiles."
    }

    /*Start CSS for Image*/
    .e-toolbar .e-toolbar-items.e-tbar-pos .e-toolbar-center {
        margin: 0 auto !important;
    }

    .e-ie-toolbar-upload-div.e-hide,
    .e-ie-toolbar-upload-btn.e-hide {
        display: none;
    }

    .e-img-editor-sample,
    .e-img-editor-sample .control-wrapper {
        position: relative;
    }

    .e-profile {
        display: contents;
        border-radius: 50%;
    }

    .e-custom-wrapper {
        position: relative;
        text-align: center;
    }

    .e-custom-edit {
        display: inline-block;
        position: relative;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: blue;
        left: -47px;
        top: -35px;
    }

    .e-custom-icon::before {
        content: '\e701';
        font-size: 18px;
        color: white;
        left: 9px;
        top: 9px;
        position: absolute;
    }

    .tailwind .e-custom-icon::before,
    .tailwind-dark .e-custom-icon::before {
        top: 6px;
    }

    #custom-edit:hover {
        cursor: pointer;
    }

    canvas#img-canvas {
        border-radius: 50%;
        border: 4px solid darkgrey;
    }

    .e-img-custom-open {
        float: left;
        margin-left: 0 !important;
    }

    .e-img-custom-reset {
        float: left;
    }

    .e-bigger #profile-dialog .e-dlg-header {
        font-size: 18px !important;
    }

    .e-dialog.e-lib.e-popup.e-control.e-popup{
        max-height: inherit !important;
        height: auto !important;
    }

    .highcontrast .e-custom-img-btn,
    .fabric .e-custom-img-btn,
    .fabric-dark .e-custom-img-btn {
        padding: 2px 10px !important;
    }

    .e-bigger .e-custom-img-btn {
        font-size: 14px !important;
        padding: 6px 10px !important;
    }

    .e-bigger.highcontrast .e-custom-img-btn,
    .e-bigger.fabric .e-custom-img-btn,
    .e-bigger.fabric-dark .e-custom-img-btn,
    .e-bigger.material .e-custom-img-btn,
    .e-bigger.material-dark .e-custom-img-btn {
        padding: 3px 10px !important;
    }

    .e-bigger.bootstrap .e-custom-img-btn,
    .e-bigger.bootstrap-dark .e-custom-img-btn {
        padding: 1px 10px !important;
    }

    .material3 .e-custom-img-btn,
    .material3-dark .e-custom-img-btn,
    .e-bigger.material3 .e-custom-img-btn,
    .e-bigger.material3-dark .e-custom-img-btn {
        margin-left: 3px !important;
    }

    .line-through, .line-through .e-editable-value { /* .line-through .e-textbox  */
        text-decoration-line: line-through;
    }
    .e-editable-form {
        display: flex;
    }
    .e-editable-form .e-editable-action-buttons {
        margin-top: 0;
        margin-left: 4px;
        position: inherit;
    }
    .e-inplaceeditor .e-editable-action-buttons .e-btn-cancel, .e-inplaceeditor-tip .e-editable-action-buttons .e-btn-cancel{
        margin:0;
        display: none;
    }
    .e-inplaceeditor{
        display: block;
    }
</style>

<script>
    window.canvasInterop = {
        imgSrc: "",
        onInitialized: function () {
            document.getElementById('img-upload').onchange = function (args) {
                var URL = window.URL; var url = URL.createObjectURL((args.target).files[0]);
                (document.getElementById('img-upload')).value = null;
                canvasInterop.imgSrc = url.toString();
                return window.objRef.invokeMethodAsync('FileSelected', url.toString());
            };
            return true;
        },
        getImageSource: function () {
            var img = document.querySelector('#custom-img'); // Add
            return img.src;
        },
        imageLoaded: function (objRef) {
            window.objRef = objRef;
            if (canvasInterop.imgSrc === '') {
                var canvas = document.querySelector('#img-canvas');
                var image = document.querySelector('#custom-img');
                var ctx = canvas.getContext('2d');
                canvas.width = image.width < image.height ? image.width : image.height;
                canvas.height = canvas.width;
                ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
                document.querySelector('.e-profile').classList.remove('e-hide');
            }
            return true;
        },
        fileSelect: function () {
            var inputFile = document.getElementById('img-upload');
            inputFile.click();
            return true;
        },
        applyImage: function (a) {
            var dataId = document.querySelector('.e-image-editor').getAttribute('dataId');
            var inst = window.sfBlazor.getCompInstance(dataId).imageEditorBase;
            var croppedData = inst.getImageData();
            var canvas = document.querySelector('#img-canvas');
            var ctx = canvas.getContext('2d');
            var parentDiv = document.querySelector('.e-profile');
            var tempCanvas = parentDiv.appendChild(document.createElement('canvas'));
            var tempContext = tempCanvas.getContext('2d');
            tempCanvas.width = croppedData.width; tempCanvas.height = croppedData.height;
            tempContext.putImageData(croppedData, 0, 0);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(tempCanvas, 0, 0, canvas.width, canvas.height);
            tempCanvas.remove();
            if (canvasInterop.imgSrc !== '') {
                const img = document.querySelector('#custom-img');
                img.src = canvasInterop.imgSrc;
            }
            return true;
        }
    };
</script>