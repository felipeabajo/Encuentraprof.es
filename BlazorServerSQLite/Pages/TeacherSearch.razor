@page "/teacher-search"
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime


<PageTitle>Teacher search</PageTitle>
<Heading1 text="Teacher search"></Heading1>

<EditForm EditContext="@editContext">
    <div class="form-row">
        <div class="col form-group">
            <SfAutoComplete @ref="AutoCompleteObj1" TValue="string" TItem="Speciality" Placeholder="Speciality"
                            DataSource="@Speciality.Specialities" FilterType="Syncfusion.Blazor.DropDowns.FilterType.StartsWith">
                <AutoCompleteFieldSettings Value="Name"></AutoCompleteFieldSettings>
                <AutoCompleteEvents TItem="Speciality" TValue="string" ValueChange="@SpecialityChanged"></AutoCompleteEvents>
            </SfAutoComplete>
        </div>
        <div class="col form-group">
            <SfAutoComplete @ref="AutoCompleteObj" TValue="string" TItem="Province" Placeholder="Province"
                            DataSource="@Province.Provinces" FilterType="Syncfusion.Blazor.DropDowns.FilterType.StartsWith">
                <AutoCompleteFieldSettings Value="Name"></AutoCompleteFieldSettings>
                <AutoCompleteEvents TItem="Province" TValue="string" ValueChange="@ProvinceChanged"></AutoCompleteEvents> @* Blur="@ProvinceBlur"  OnValueSelect="@ProvinceSelect"*@
            </SfAutoComplete>
        </div>
    </div>
</EditForm>

<CascadingValue Value="selectedUsersList" Name="UsersList">
    <CascadingValue Value="user" Name="User">
        <UserCardsSet></UserCardsSet>
    </CascadingValue>
</CascadingValue>

@code {
    private EditContext editContext;
    private List<ApplicationUser> usersList = new List<ApplicationUser>();
    private List<ApplicationUser> selectedUsersList = new List<ApplicationUser>();
    private bool userAuthenticated { get; set; } = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Inject]
    UserManager<ApplicationUser> userManager { get; set; }
    ApplicationUser? user;
    private string baseUri = string.Empty;
    SfAutoComplete<string, Province> AutoCompleteObj = new SfAutoComplete<string, Province>();
    SfAutoComplete<string, Speciality> AutoCompleteObj1 = new SfAutoComplete<string, Speciality>();


    protected override async Task OnInitializedAsync()
    {
        baseUri = navigationManager.BaseUri;
        var user2 = (await authenticationStateTask).User;
        if (user2.Identity.IsAuthenticated)
        {
            user = await userManager.GetUserAsync(user2);
            editContext = new EditContext(user);
            userAuthenticated = true;
        }
        await LoadUsers();
        selectedUsersList = usersList;
    }
    async Task LoadUsers()
    {
        //var path = navigationManager.BaseUri + "Users/GetApplicationUsers";
        var path = navigationManager.BaseUri + "Users/GetTeachersWithPublicProfile";
        var result = await Http.GetFromJsonAsync<List<ApplicationUser>>(path);
        usersList = result;
    }
    // private void ProvinceBlur(Object args)
    // {
    //     usersList = usersList.Where(x => x.Province == AutoCompleteObj.Value).ToList();
    // }
    // private void ProvinceSelect(SelectEventArgs<Province> args)
    // {
    //     usersList = usersList.Where(x => x.Province == AutoCompleteObj.Value).ToList();
    // }
    private void ProvinceChanged(ChangeEventArgs<string,Province> args)
    {
        if (AutoCompleteObj.Value != null)
        {
            selectedUsersList = usersList.Where(x => x.Province == AutoCompleteObj.Value).ToList();
        }
        else
        {
            selectedUsersList = usersList;
        }
    }
    private async void SpecialityChanged(ChangeEventArgs<string, Speciality> args)
    {
        if (AutoCompleteObj1.Value != null)
        {
            selectedUsersList = usersList.Where(x => x.Speciality == AutoCompleteObj1.Value).ToList();
        }
        else
        {
            selectedUsersList = usersList;
        }
    }
}