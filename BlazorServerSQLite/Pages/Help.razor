@page "/help"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject MyStateContainer myStateContainer
@inject IEmailSenderService EmailSenderService
<PageTitle>Help</PageTitle>
<Heading1 text="Help"></Heading1>
<div class="row">
    <EditForm Model="mailRequest">
        <div class="form-row">
            <div class="col form-group">
                <label class="control-label">Email:</label>
                <SfTextBox Placeholder="Email" Blur="FieldBlur"
                @bind-Value=@mailRequest.ToEmail></SfTextBox>
                <ValidationMessage For="@(() => mailRequest.ToEmail)"></ValidationMessage>
            </div>
        </div>
        <div class="form-row">
            <div class="col form-group">
                <label class="control-label">Subject:</label>
                <SfTextBox Placeholder="Subject" Blur="FieldBlur"
                @bind-Value=@mailRequest.Subject></SfTextBox>
                <ValidationMessage For="@(() => mailRequest.Subject)"></ValidationMessage>
            </div>
        </div>
        <div class="form-row">
            <div class="col form-group">
                <label class="control-label">Body:</label>
                <SfTextBox Placeholder="Body" Multiline="true" Blur="FieldBlur"
                @bind-Value=@mailRequest.Body></SfTextBox>
                <ValidationMessage For="@(() => mailRequest.Body)"></ValidationMessage>
            </div>
        </div>
        <SfButton OnClick="SendMail" Content="Send" Disabled=@sendButtonDisable></SfButton>
        <DataAnnotationsValidator/>
    </EditForm>
</div>
<div class="@cssClassSentMessage">
    <SfMessage Severity="MessageSeverity.Info">
        Required fields must be filled for enabling public mode.
    </SfMessage>
</div>
<div class="row">
    <div class="col">
@*         test soporte, tiempo real, teléfono. Icono de helpdesk o mejor una foto mía profesional y presentarme como desarrollador y agente de soporte. 
 *@ </div>
    <div class="col">
        @* formas de contacto en formato texto *@
    </div>
    <div class="col">
        @* buy me a coffe? no apropiado... hasta que tenga FAQs? social icons?*@
    </div>
</div>
@code {
    private EditContext editContext;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Inject]
    UserManager<ApplicationUser> userManager { get; set; }
    MailRequest mailRequest = new MailRequest();
    ApplicationUser? user;
    private bool emailSent = false;
    string cssClassSentMessage = "hide-message";
    private bool sendButtonDisable = true;
    private bool areRequiredFieldsFilled = false;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(mailRequest);
    }
    // private void SendMail()
    // {
    //     EmailSenderService.SendEmailAsync(mailRequest);
    // } //This point is reached even when the address does not exist because is reached before executing SendEmailAsync

    private async void SendMail()
    {
        await EmailSenderService.SendEmailAsync(mailRequest);
        emailSent = true;
        if (emailSent)
        {
            cssClassSentMessage = "show-message";
            StateHasChanged();
        }
    }

    private async Task AreRequiredFieldsFilled()
    {
        if ((mailRequest.ToEmail == null || mailRequest.ToEmail == String.Empty) ||
        (mailRequest.Subject == null || mailRequest.Subject == String.Empty) ||
        (mailRequest.Body == null || mailRequest.Body == String.Empty))
        {
            areRequiredFieldsFilled = false;
        }
        else
        {
            areRequiredFieldsFilled = true;
        }
    }

    public async void FieldBlur(FocusOutEventArgs args)
    {
        await AreRequiredFieldsFilled();
        if (areRequiredFieldsFilled)
        {
            sendButtonDisable = false;
        }
        else
        {
            sendButtonDisable = true;
        }
    }


}