@attribute [Authorize(Roles = "Teacher")]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProtectedLocalStorage ProtectedLocalStorage

<div class="@cssClass" style="display:none;">
    <WarningMessage name="@name" text="Your profile has never been public. Firstname, speciality, price (hour), province and profile image
        are required for public profiles. Once you enter this information you will be able to make your profile public by using the
        toggle button NEW LOCATION FOR SWITCH."></WarningMessage>
@*     There are some required fields for profiles to get approved: firstname, speciality, price (hour) and province. Once you enter this
    information, the request button will be enabled and you will be able to request approval of your
    profile. *@
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Inject]
    UserManager<ApplicationUser> userManager { get; set; }
    public ApplicationUser? user;
    public TeacherProfileRequest? teacherProfileRequest;
    public List<TeacherProfileRequest> teacherProfileRequests;
    string cssClass = String.Empty;
    bool cookieRead { get; set; }
    string name = "teacher-no-requests";

    protected override async Task OnInitializedAsync()
    {
        var user2 = (await authenticationStateTask).User;
        if (user2.Identity.IsAuthenticated)
        {
            user = await userManager.GetUserAsync(user2);
        }
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadRequests();
            cookieRead = await SetCookieRead();
            //bool teacherNoRequests = teacherProfileRequest == null ? true : false;
            cssClass = "alert m-0 p-0";
            //if (teacherNoRequests)
            if (user.EverPublicProfile == false || user.EverPublicProfile == null)
            {
                if (!cookieRead)
                {
                    cssClass = "show alert m-0 p-0";
                    StateHasChanged();
                    Refresh();
                }
            }
        }
    }

    public async Task<bool> SetCookieRead()
    {
        bool cookieRead;
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<string>(name);
            if (result.Success)
            {
                cookieRead = Boolean.Parse(result.Value);
            }
            else
            {
                await ProtectedLocalStorage.SetAsync(name, "false");
                cookieRead = false;
            }
        }
        catch (Exception)
        {
            throw;
        }
        return cookieRead;
    }

    async Task LoadRequests()
    {
        var path = Navigation.BaseUri + $"TeacherProfileRequest/GetOneTeacherProfileRequestByTeacherId?Id={user.Id}";
        var result = await Http.GetFromJsonAsync<TeacherProfileRequest>(path);
        if (result.Id != null)
        {
            teacherProfileRequest = result;
        }
    }
    public async void Refresh()
    {
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }
}

<style>
    .show {
        display: block !important;
    }
</style>