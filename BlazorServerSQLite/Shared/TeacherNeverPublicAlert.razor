@attribute [Authorize(Roles = "Teacher")]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProtectedLocalStorage ProtectedLocalStorage

<div class="@cssClass">
    <SfMessage Closed="CloseNeverPublicAlert" Severity="MessageSeverity.Warning" ShowCloseIcon="true">
        Your profile has never been public. Firstname, speciality, price (hour), province and profile image
        are required for public profiles. Once you enter this information you will be able to make your profile public by using the
        toggle button NEW LOCATION FOR SWITCH.
    </SfMessage>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Inject]
    UserManager<ApplicationUser> userManager { get; set; }
    public ApplicationUser? user;
    string cssClass = "hide-message alert m-0 p-0";
    bool cookieRead { get; set; }
    string name = "CloseNeverPublicAlert";

    protected override async Task OnInitializedAsync()
    {
        var user2 = (await authenticationStateTask).User;
        if (user2.Identity.IsAuthenticated)
        {
            user = await userManager.GetUserAsync(user2);
        }
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            cookieRead = await SetCookieRead();
            if (user.EverPublicProfile == false || user.EverPublicProfile == null)
            {
                if (!cookieRead)
                {
                    cssClass = "show-message-block alert m-0 p-0";
                    StateHasChanged();
                    Refresh();
                }
            }
            else
            {
                cssClass = "hide-message alert m-0 p-0";
                StateHasChanged();
            }
        }
    }

    public async Task<bool> SetCookieRead()
    {
        bool cookieRead;
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<string>(name);
            if (result.Success)
            {
                cookieRead = Boolean.Parse(result.Value);
            }
            else
            {
                await ProtectedLocalStorage.SetAsync(name, "false");
                cookieRead = false;
            }
        }
        catch (Exception)
        {
            throw;
        }
        return cookieRead;
    }

    public async void Refresh()
    {
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    public async void CloseNeverPublicAlert()
    {
        await ProtectedLocalStorage.SetAsync(name, "true");
        StateHasChanged();
    }
}