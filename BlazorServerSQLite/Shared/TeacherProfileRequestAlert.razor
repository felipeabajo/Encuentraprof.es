@attribute [Authorize(Roles = "Teacher")]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProtectedLocalStorage ProtectedLocalStorage


<div class="@cssClass" style="display:none;">
    <InformationMessage name="@name" text="Your changes are under review. Your profile will be updated when 
        the changes are approved."></InformationMessage>
    @* Pending teacher profile requests *@
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Inject]
    UserManager<ApplicationUser> userManager { get; set; }
    public ApplicationUser? user;
    public TeacherProfileRequest? teacherProfileRequest;
    public List<TeacherProfileRequest> teacherProfileRequests;
    string cssClass = String.Empty;
    bool cookieRead { get; set; }
    string name = "pending-teacher-profile-request";

    protected override async Task OnInitializedAsync()
    {
        var user2 = (await authenticationStateTask).User;
        if (user2.Identity.IsAuthenticated)
        {
            user = await userManager.GetUserAsync(user2);
        }
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadRequests();
            cookieRead = await SetCookieRead();
            bool pendingRequest = teacherProfileRequest != null ? true : false;
            cssClass = "alert m-0 p-0";
            if (pendingRequest)
            {
                if (!cookieRead)
                {
                    cssClass = "show alert m-0 p-0";
                    StateHasChanged();
                }
            }
        }
    }

    async Task LoadRequests() 
    {
        var path = Navigation.BaseUri + $"TeacherProfileRequest/GetOnePendingTeacherProfileRequestByTeacherId?Id={user.Id}";
        var result = await Http.GetFromJsonAsync<TeacherProfileRequest>(path);
        if(result.Id != null)
        {
            teacherProfileRequest = result;
        }
    }

    public async Task<bool> SetCookieRead()
    {
        var result = await ProtectedLocalStorage.GetAsync<string>(name);
        bool cookieRead;
        if (result.Success)
        {
            cookieRead = Boolean.Parse(result.Value);
        }
        else
        {
            await ProtectedLocalStorage.SetAsync(name, "false");
            cookieRead = false;
        }
        return cookieRead;
    }
    public async void Refresh()
    {
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }
}

<style>
    .show{
        display:block !important;
    }
</style>