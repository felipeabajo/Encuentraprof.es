@inject NavigationManager Navigation
@inject HttpClient Http

<div class="col" id="User_@(teacher.Id)">
    <SfCard ID="" CssClass="user-card">
        <CardImage Image="@teacherImagePath" />
        <CardHeader Title="@teacher.Firstname" SubTitle=@(teacher.Speciality + ", " + teacher.Province)></CardHeader>
    <CardContent>
        <strong>@teacher.Price €</strong> hora
    </CardContent>
    <CardFooter>
        <SfButtonGroup CssClass="e-round-corner">
                <ButtonGroupButton CssClass="e-primary">Contact</ButtonGroupButton>
                <ButtonGroupButton CssClass="e-link" @onclick="@(e => NavigateToTeacherPage(e,( "/teachers/"+teacher.Id)))">
                    See details</ButtonGroupButton>
            @if (loggedIn)
            {
                <ButtonGroupButton CssClass="e-link" @onclick="@ToggleDo">@(done ? "Unsave" : "Save")</ButtonGroupButton>
            }
        </SfButtonGroup>
    </CardFooter>
</SfCard>
</div>




<SfToast ID="do-toast" @ref="DoToastObj" CssClass="toast_template"
         Timeout="10000" ExtendedTimeout="5000">
    <ToastPosition X="Left" Y="Bottom"></ToastPosition>
    <ToastTemplates>
        <Template>
            <div id='template_toast'>
                <div class="horizontal-align">
                    <div class='toast-content'>
                        <div class='toast-message'>
                            Teacher saved.
                        </div>
                    </div>
                </div>
            </div>
        </Template>
    </ToastTemplates>
</SfToast>

<SfToast ID="undo-toast" @ref="UndoToastObj" CssClass="toast_template"
         Timeout="10000" ExtendedTimeout="5000">
    <ToastPosition X="Left" Y="Bottom"></ToastPosition>
    <ToastTemplates>
        <Template>
            <div id='template_toast'>
                <div class="horizontal-align">
                    <div class='toast-content'>
                        <div class='toast-message'>
                            Teacher unsaved.
                        </div>
                    </div>
                </div>
            </div>
        </Template>
    </ToastTemplates>
</SfToast>

    @code {
    [Inject]
    UserManager<ApplicationUser> userManager { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter(Name = "Teacher")]
    ApplicationUser? teacher { get; set; }
    ApplicationUser? user { get; set; }
    string teacherImagePath { get; set; }
    private string baseUri { get; set; }
    SfToast DoToastObj;
    SfToast UndoToastObj;
    private bool isDoToastShown { get; set; }
    private bool isUndoToastShown { get; set; }
    private bool done = false;
    public List<string> savedTeachers { get; set; }
    private bool loggedIn = false;



    protected override async Task OnInitializedAsync()
    {
        baseUri = Navigation.BaseUri;
        teacherImagePath = baseUri + "img/users/" + teacher.Id + ".jpg";// "img/logo.png"
        var user2 = (await authenticationStateTask).User;
        if (user2.Identity.IsAuthenticated)
        {
            loggedIn = true;
            user = await userManager.GetUserAsync(user2);
            var path = baseUri + $"TeacherSavings/GetSavedTeachers/?Id={user.Id}";
            var result2 = await Http.GetFromJsonAsync<List<string>>(path);
            savedTeachers = result2;
            if (savedTeachers.Contains(teacher.Id))
            {
                done = true;
            }
        }

    }

    public async Task SaveTeacher()
    {
        if (!isDoToastShown)
        {
            ShowDoToast();
        }
        var likingId = Guid.NewGuid().ToString();
        TeacherSaving liking = new TeacherSaving
            {
                Id = likingId,
                UserId = user.Id,
                TeacherId = teacher.Id
            };
        var path = baseUri + "TeacherSavings/Add";
        var response = await Http.PostAsJsonAsync<TeacherSaving>(path, liking);
    }

    public async Task UnsaveTeacher()
    {
        if (!isUndoToastShown)
        {
            ShowUndoToast();
        }
        var path = baseUri + "TeacherSavings/List?Id=" + user.Id;
        var resultado = await Http.GetFromJsonAsync<List<TeacherSaving>>(path);
        var liking = resultado.Where(x => x.TeacherId == teacher.Id).First();

        var path2 = baseUri + "TeacherSavings/Delete";
        var response = await Http.PostAsJsonAsync<TeacherSaving>(path2, liking);
    }

    async Task ToggleDo()
    {
        if (done == false)
        {
            if (isUndoToastShown)
            {
                await HideDoToast();
                await HideUndoToast();
            }
            await Do();
            await SaveTeacher();
        }
        if (done == true)
        {
            if (isDoToastShown)
            {
                await HideDoToast();
            }
            await Undo();
            await UnsaveTeacher();
        }
        done = !done;
    }

    public async Task Do()
    {
        if (!isDoToastShown)
        {
            await ShowDoToast();
        }
        
    }

    public async Task Undo()
    {
        if (!isUndoToastShown)
        {
            await ShowUndoToast();
        }
    }
    private async Task ShowDoToast()
    {
        await this.DoToastObj.ShowAsync();
        isDoToastShown = true;
    }
    private async Task HideDoToast()
    {
        await this.DoToastObj.HideAsync();
        isDoToastShown = false;
    }
    private async Task ShowUndoToast()
    {
        await this.UndoToastObj.ShowAsync();
        isUndoToastShown = true;
    }
    private async Task HideUndoToast()
    {
        await this.UndoToastObj.HideAsync();
        isUndoToastShown = false;
    }
    async Task NavigateToTeacherPage(Microsoft.AspNetCore.Components.Web.MouseEventArgs args, string page)
    {
        Navigation.NavigateTo(page);
    }
}

<style>
    .e-card{
        border: none;
        transition: all 0.5s ease-in-out;
        transform: scale(1);

    }
    .e-card:hover{
        transform: scale(1.03);
        box-shadow: 2px 4px 4px #777;
    }
    .e-card .e-card-image{
        min-height: 200px;
        border-radius: 4px;
    }
</style>
